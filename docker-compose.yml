services:
  app-dev:
    container_name: myapp_nest
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    pull_policy: build
    image: myapp_nest_image
    restart: unless-stopped
    env_file: .env
    environment:
      NODE_ENV: development
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      AWS_S3_ENDPOINT: http://minio_s3:9000
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: miniostorage
    ports:
      - 3000:3000
    depends_on:
      database:
        condition: service_healthy
        restart: true
    command: yarn start:dev
    # 1. bind mount the project source (host<->container)
    # 2. set a data volume from container's `$WORKDIR/node_modules/`
    #   -> use the bind mount from host & image's `node_modules` at the same time
    #   -> Make changes in local & reflect on container (without rebuild)
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  database:
    container_name: database
    image: postgres:14.12-alpine3.20
    restart: always
    environment:
      POSTGRES_PASSWORD: pgpassword
      POSTGRES_USER: pguser
      POSTGRES_DB: pgdatabase
    healthcheck:
      test: ['CMD', 'pg_isready', '-q', '-U', 'pguser', '-d', 'pgdatabase']
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - .pgdata/:/var/lib/postgresql
      # - .tmp/:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432

  s3:
    image: minio/minio:RELEASE.2024-01-18T22-51-28Z
    container_name: minio_s3
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniostorage
    command: server /data/minio --console-address :9001
    healthcheck:
      test: ['CMD', 'mc', 'ready', 'local']
      interval: 5s
      timeout: 5s
      retries: 5
